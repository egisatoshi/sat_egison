;; to comfirm an allocation

(define $alc-ref
  (lambda [$alc $var]
    (if (member? var alc) <T> <F>)))

(define $neg
  (lambda [$val]
    (match val something {[,<T> <F>] [,<F> <T>]})))

(define $literal
  (matcher {[<p $> [nat] {[<Pos $x> {x}] [_ {}]}]
            [<n $> [nat] {[<Neg $x> {x}] [_ {}]}]
            [,$l [] {[$tgt (if (eq? tgt l) {[]} {})]}]
            [$ [something] {[$tgt {tgt}]}]}))

(define $flip-literal
  (lambda [$lit]
    (match lit literal
      {[<p $x> <Neg x>]
       [<n $x> <Pos x>]})))

(define $var-of-literal
  (lambda [$lit]
    (match lit literal
      {[<p $x> x]
       [<n $x> x]})))

(define $eval-literal
  (lambda [$alc $lit]
    (match lit literal {[<p $var> (alc-ref alc var)]
                        [<n $var> (neg (alc-ref alc var))]})))

(define $eval-cls
  (lambda [$alc $cls]
    (match cls (list literal)
      {[<nil> <F>]
       [<cons $lit $rst> (match (eval-literal alc lit) something
                           {[,<T> <T>]
                            [,<F> (eval-cls alc rst)]})]})))

(define $eval-cnf
  (lambda [$alc $cnf]
    (match cnf (list something)
      {[<nil> <T>]
       [<cons $cls $rst> (match (eval-cls alc cls) something
                           {[,<T> (eval-cnf alc rst)]
                            [,<F> <F>]})]})))

;; to solve sat problem

(define $allocate-true
  (lambda [$cnf $var]
    (match-all cnf (set (set literal))
      [<cons (& $cls !<cons <p ,var> _>) _> (delete <Neg var> cls)])))

(define $allocate-false
  (lambda [$cnf $var]
    (match-all cnf (set (set literal))
      [<cons (& $cls !<cons <n ,var> _>) _> (delete <Pos var> cls)])))

(define $delete-literal
  (lambda [$lit $cnf $vars $alc]
    (match lit literal
      {[<p $x> [(allocate-true cnf x) (delete x vars) (cons x alc)]]
       [<n $x> [(allocate-false cnf x) (delete x vars) alc]]})))

(define $exist?
  (lambda [$lit $cnf]
    (match cnf (multiset (multiset literal))
      {[<cons <cons ,lit _> _> #t]
       [_ #f]})))

(define $answer
  (matcher {[<sat $> [(set nat)] {[<SAT $alc> {[alc]}] [<UNSAT> {}]}]
            [<unsat> [] {[<SAT $alc> {}] [<UNSAT> {[]}]}]
            [$ [something] {[$tgt {[tgt]}]}]}))

(define $enumerate-vars
  (lambda [$cnf]
    (unique (match-all cnf (multiset (multiset literal))
      [<cons <cons $lit _> _> (var-of-literal lit)]))))

(define $delete-totology
  (lambda [$cls]
    (match cls (multiset literal)
      {[<cons $lit <cons ,(flip-literal lit) $tail>> (delete-totology tail)]
       [<cons $lit <cons ,lit $tail>> (delete-totology (cons lit tail))]
       [<cons _ _> cls]
       [<nil> cls]})))

(define $preprocess
  (lambda [$cnf]
    (map delete-totology cnf)))

(define $sat
  (letrec
    {[$sat-body
      (lambda [$cnf $vars $alc]
        (match [vars cnf] [(multiset integer) (multiset (multiset literal))]
          {[[_ <nil>] <SAT alc>]
           [[_ <cons <nil> _>] <UNSAT>]
           [[_ <cons <cons $lit <nil>> _>] (sat-body (delete-literal lit cnf vars alc))]
           [[<nil> _] "Error"]
           [[<cons $x _> !<cons <cons ,<Pos x> _> _>]
            (sat-body (delete-literal <Neg x> cnf vars alc))]
           [[<cons $x _> !<cons <cons ,<Neg x> _> _>]
            (sat-body (delete-literal <Pos x> cnf vars alc))]
           [[<cons $x $xs> _]
            (match (sat-body (allocate-true cnf x) xs (cons x alc)) answer
              {[(& <sat _> $ans) ans]
               [<unsat> (sat-body (allocate-false cnf x) xs alc)]})]}))]}
    (lambda [$cnf] (sat-body (preprocess cnf) (enumerate-vars cnf) {}))))

;; sample inputs
;; A comment shows a possible allocation

(define $sample-cnf1
  {{<Pos 1> <Pos 2>} {<Pos 1> <Neg 2>} {<Neg 1> <Neg 2>}}) ; 1 = T, 2 = F
(define $sample-cnf2
  {{<Pos 1> <Pos 2>} {<Neg 1> <Pos 2>} {<Pos 1> <Neg 2>} {<Neg 1> <Neg 2>}}) ; UNSATISFIABLE

(define $random-literal
  (lambda [$num-of-var]
    (let {[$var (pure-rand 1 num-of-var)]}
      (match (pure-rand 1 2) nat
        {[,1 <Pos var>]
         [_  <Neg var>]}))))

(define $random-3cnf
  (lambda [$num-of-var $num-of-cls]
    (match num-of-cls nat
      {[<o> {}]
       [<s $n> 
        (cons {(random-literal num-of-var)
               (random-literal num-of-var)
               (random-literal num-of-var)}
              (random-3cnf num-of-var n))]})))

(define $test-sat
  (lambda [$num-of-var $num-of-cls]
    (let* {[$cnf (random-3cnf num-of-var num-of-cls)]
           [$res (sat cnf)]
           [$evl (match res answer
                   {[<sat $alc> (match (eval-cnf alc cnf) something
                                  {[,<T> "OK"]
                                   [,<N> "NG"]})]
                    [<unsat> "cannot confirm"]})]}
    (do {(print "cnf:")
         (print (show cnf))
         (print "(sat cnf):")
         (print (show res))
         (print "confirmation:")
         (print evl)
         }
      (return)))))
