;; to output error
(define $err
  (lambda [$str $acc] (seq (io (print (S.append "Error: " str))) acc)))

;; to comfirm an allocation

(define $eval-literal
  (lambda [$alc $lit]
    (match [(member? lit alc) (member? (neg lit) alc)] [bool bool]
      {[[,#t _] #t]
       [[,#f ,#t] #f]
       [[,#f ,#f] #t]})))

(define $eval-cls
  (lambda [$alc $cls]
    (match cls (list integer)
      {[<nil> #f]
       [<cons $lit $rst> (or (eval-literal alc lit) (eval-cls alc rst))]})))

(define $eval-cnf
  (lambda [$alc $cnf]
    (match cnf (list (list integer))
      {[<nil> #t]
       [<cons $cls $rst> (and (eval-cls alc cls) (eval-cnf alc rst))]})))

; to solve sat problem

;; data
;;; variable : nat = {1, 2, 3, ...}
;;; literal  : integer
;;;     A variable and the negation of the variable are both literal
;;; clause   : collection literal
;;; formula  : collection clause
;;; level    : nat0 = {0, 1, 2, ...}
;;; allocation : collection (collection <ALC variable bool (op clause)>)
;;; proof    : <DRV clause proof proof> | <AXM clause>
;;; answer   : <SAT allocation> | <UNSAT proof>
;;;     <UNSAT p> has a proof of empty clause
;;; cnf-db   : collection cnf (as list)

(define $variable
  (matcher {[<no-polar $> [nat] {[$tgt {tgt (neg tgt)}]}]
            [$ [eq] {[$tgt {tgt}]}]}))

(define $literal integer)
(define $clause (multiset literal))
(define $formula (multiset clause))
(define $level integer)

(define $op
  (lambda [$m]
    (matcher
      {[<some $> [m] {[<Some $x> {[x]}] [<None> {}]}]
       [<none> [] {[<None> {[]}] [<Some $x> {}]}]})))

(define $allc-elm
  (matcher
    {[<alc $ $ $ $> [variable bool (op clause) (multiset allc-elm)]
      {[<ALC $var $b $opc $org> {[var b opc org]}]}]}))

(define $allocation (list (multiset allc-elm)))

(define $proof
  (matcher
    {[<drv $ $ $> [clause proof proof] {[<DRV $cls $prf1 $prf2> {[cls prf1 prf2]}]}]
     [<axm $> [clause] <AXM $cls> {[cls]}]})) 

(define $answer
  (matcher {[<sat $> [(multiset allc-elm)] {[<SAT $alc> {[alc]}] [<UNSAT $w> {}]}]
            [<unsat $> [proof] {[<SAT $alc> {}] [<UNSAT $w $hl2> {[w hl2]}]}]
            [$ [eq] {[$tgt {[tgt]}]}]}))

(define $cnf-db (list formula))  

(define $delete-tautology
  (lambda [$cnf]
    (match cnf formula
      {[<cons <cons $lit <cons ,(neg lit) _>> $tail> (delete-tautology tail)]
       [_ cnf]})))

(define $preprocess
  (lambda [$cnf] (delete-tautology (map unique cnf))))

(define $learn
  (lambda [$cfl] ))

(define $allocate
  (lambda [$lit $db $vars $allc $lvl] ))

(define $branch
  (lambda [$x $db $vars $alc $lvl]
    ())

(define $sat-body
  (lambda [$db $vars $allc $lvl]
    (match db cnf-db
      [<cons <nil> _> <SAT allc>]
      [<cons <cons (& $cfl <nil>) _> _> <UNSAT <AXM {}>>]
      [<cons <cons (& $unt <cons $lit <nil>>) <cons <cons ,(neg lit) <nil>> _>> _>
       
      [<cons <cons (& $unt <cons $lit <nil>>) _> _> (sat-body (allocate lit db vars allc lvl))]
      [_ (match vars (multiset variable)
           {[<cons $x> (branch x db vars alc (+ 1 lvl))]})])))

(define $sat
  (lambda [$num-of-vars $cnf])
  (sat-body {(preprocess cnf)} (take num-of-vars nats) {} 0))

(define $allocate-cls
  (lambda [$cls $lit $w $lvl]
    (match cls (list alclit)
      {[<cons <yet ,lit> $tail> (cons <Ald lit #t w lvl> (allocate-cls tail lit w lvl))]
       [<cons <yet ,(neg lit)> $tail> (cons <Ald (neg lit) #f w lvl> (allocate-cls tail lit w lvl))]
       [<cons $cls $tail> (cons cls (allocate-cls tail lit w lvl))]
       [<nil> {}]})))

(define $allocate
  (lambda [$lit $cnf $vars $alc $w $lvl]
    [(map (allocate-cls $ lit w lvl) cnf) (delete (abs lit) vars) (cons lit alc) lvl]))

(define $delete-tautology
  (lambda [$cnf]
    (match (map unique cnf) (list (multiset integer))
      {[<cons <cons $lit <cons ,(neg lit) _>> $tail> (delete-tautology tail)]
       [<cons $cls $tail> (cons cls (delete-tautology tail))]
       [<nil> {}]})))

(define $alclit-of-lit
  (lambda [$lit]
    <Yet lit>))

(define $preprocess
  (lambda [$cnf]
    (map (map alclit-of-lit $) (delete-tautology cnf))))

(define $w-of-ald
  (match-lambda alclit {[<ald _ _ $w _> w]
                        [_ (seq (io (print "Error: w-of-ald: arg must be <Ald _ ...>")) {})]}))

(define $lvl-of-ald
  (match-lambda alclit {[<ald _ _ _ $lvl> lvl]}))

(define $highest-lvl
  (match-lambda (list alclit)
    {[<nil> [<Ald 0 #f #f -1> <Ald 0 #f #f -2>]]
     [<cons <yet _> $tail> (highest-lvl tail)]
     [<cons $alit $tail> 
      (let* {[$lvl (lvl-of-ald alit)]
             [[$al1 $al2] (highest-lvl tail)]
             [$fst (lvl-of-ald al1)]
             [$snd (lvl-of-ald al2)]}
        (if (lt? lvl snd) [al1 al2] (if (lt? lvl fst) [al1 alit] [alit al1])))]}))
          
(define $deduce
  (lambda [$cls1 $cls2]
    (match [cls1 cls2] [clause clause]
      {[[<lcons $lit $tail1> <lcons ,lit $tail2>] (deduce cls1 tail2)]
       [[<lcons $lit $tail1> <lcons ,(neg lit) $tail2>] (deduce tail1 tail2)]
       [[_ _] (append cls1 cls2)]})))

(define $learn
  (lambda [$w]
    (let* {[[$fst $snd] (highest-lvl w)]
           [[$hl1 $hl2] [(lvl-of-ald fst) (lvl-of-ald snd)]]}
      (if (lt? hl1 0) (io (print "Error: learn: There is no allocated literal."))
        (if (lt? hl2 hl1) <UNSAT w hl2>
          (match (w-of-ald snd) clause
            {[,#f (match (w-of-ald fst) clause
                    {[,#f (io (print "Error: learn: There are two variable decided in the same level."))]
                     [$w1 (learn (deduce w1 w))]})]
             [$w2 (learn (deduce w w2))]}))))))

(define $back-jump-cls
  (lambda [$cls $vars $alc $lvl]
    (match cls (list alclit)
      {[<nil> [{} vars alc lvl]]
       [<cons (& $alc0 (| <yet _> <ald _ _ _ ?(lt? $ lvl)>)) $tail>
        (let {[[$cls1 $vars1 $alc1 $lvl1] (back-jump-cls tail vars alc lvl)]}
          [(cons alc0 cls1) vars alc1 lvl1])]
       [<cons <ald $lit _ _ _> $tail>
        (let {[[$cls1 $vars1 $alc1 $lvl1] (back-jump-cls tail vars alc lvl)]
              [$var (abs lit)]}
          [(cons <Yet lit> cls1)
           (if (member? var vars1) vars1 (cons var vars1))
           (match-all alc1 (multiset integer) [<cons (& $x !(| ,var ,(neg var))) _> x])
           lvl])]})))

(define $back-jump
  (lambda [$cnf $vars $alc $lvl]
    (match cnf (list clause)
      {[<nil> [cnf vars alc lvl]]
       [<cons $cls $tail> 
        (let* {[[$cls1 $vars1 $alc1 $lvl1] (back-jump-cls cls vars alc lvl)]
               [[$cnf2 $vars2 $alc2 $lvl2] (back-jump tail vars1 alc1 lvl)]}
          [(cons cls1 cnf2) vars2 alc2 lvl])]})))
  
(define $sat
  (letrec
    {[$sat-body
      (lambda [$cnf $vars $alc $lvl]
        (match [vars cnf] [(multiset variable) formula]
          {[[_ <nil>] <SAT alc>]
           [[_ <cons (& $w <nil>) _>] (learn w)]
           [[_ <cons (& $w <cons $lit <nil>>) _>] (sat-body (allocate lit cnf vars alc w lvl))]
           [[<nil> _] (io (print "Error: sat: no variables"))]
           [[<cons $x _> _] (branch x cnf vars alc (+ 1 lvl))]}))]
     [$branch
      (lambda [$var $cnf $vars $alc $lvl]
        (match (sat-body (allocate var cnf vars alc #f lvl)) answer
          {[(& $acc <sat _>) acc]
           [<unsat $w ?(lt? $ 0)> (sat-body (back-jump (cons w cnf) vars alc 0))]
           [<unsat $w $hl2> (sat-body (back-jump (cons w cnf) vars alc hl2))]}))]}
    (lambda [$num-of-var $cnf] (sat-body (preprocess cnf) (take num-of-var nats) {} 0))))

; generater of random 3-cnf

(define $random-literal
  (lambda [$num-of-var]
    (let {[$var (pure-rand 1 num-of-var)]}
      (match (pure-rand 1 2) nat
        {[,1 var]
         [_  (neg var)]}))))

(define $random-3cnf
  (lambda [$num-of-var $num-of-cls]
    (match num-of-cls nat
      {[<o> {}]
       [<s $n> 
        (cons {(random-literal num-of-var)
               (random-literal num-of-var)
               (random-literal num-of-var)}
              (random-3cnf num-of-var n))]})))

(define $test-sat
  (lambda [$num-of-var $num-of-cls]
    (let* {[$cnf (random-3cnf num-of-var num-of-cls)]
           [$res (sat num-of-var cnf)]
           [$evl (match res answer
                   {[<sat $alc> (if (eval-cnf alc cnf) "OK" "NG")]
                    [<unsat _ _> "cannot confirm"]})]}
    (do {(print "cnf:")
         (print (show cnf))
         (print "(sat cnf):")
         (print (show res))
         (print "confirmation:")
         (print evl)
         }
      (return)))))

;; parser originally written by Nishiwaki

(define $split-line
  (lambda [$line]
    (filter (lambda [$s] (not (eq? s ""))) (split-string " " line))))

(define $read-cnf
  (lambda [$fn]
    (io (do {[$port (open-input-file fn)]}
          (letrec {[$go (lambda [$num $acc]
                          (do {[$end? (eof-port? port)]}
                            (if end?
                              (return [num (reverse acc)])
                              (do {[$line (read-line-from-port port)]}
                                (if (eq? (S.car line) c#c) (go num acc)
                                  (if (eq? (S.car line) c#p) 
                                    (go (read (car (cdr (cdr (split-line line))))) acc)
                                    (go num (cons (rdc (map read (split-line line))) acc))))))))]}
            (go 0 {}))))))

(define $main
  (match-lambda (list string)
    {[<cons $fn _>
      (let* {[[$num $cnf] (read-cnf fn)]
             [$res (sat num cnf)]
             [$con (match res answer
                     {[<sat $alc> (if (eval-cnf alc cnf) "OK" "NG")]
                      [<unsat> "unsat"]})]}
        (do {(print (show res))
             (print con)}))]}))
